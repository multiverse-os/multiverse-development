// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.11.4
// source: builder.proto

package builder

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is discarded in all but the first Store Chunk message per stream.
	// path is unset in all but the first Retrieve Chunk message per stream.
	Path  string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // relative, e.g. pkgs/emacs/build.textproto.
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_builder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_builder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_builder_proto_rawDescGZIP(), []int{0}
}

func (x *Chunk) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Chunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type StoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StoreResponse) Reset() {
	*x = StoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_builder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreResponse) ProtoMessage() {}

func (x *StoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreResponse.ProtoReflect.Descriptor instead.
func (*StoreResponse) Descriptor() ([]byte, []int) {
	return file_builder_proto_rawDescGZIP(), []int{1}
}

type RetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // relative, typically output_path from BuildProgress
}

func (x *RetrieveRequest) Reset() {
	*x = RetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_builder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRequest) ProtoMessage() {}

func (x *RetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRequest.ProtoReflect.Descriptor instead.
func (*RetrieveRequest) Descriptor() ([]byte, []int) {
	return file_builder_proto_rawDescGZIP(), []int{2}
}

func (x *RetrieveRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type BuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkingDirectory string   `protobuf:"bytes,1,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"` // relative
	InputPath        []string `protobuf:"bytes,2,rep,name=input_path,json=inputPath,proto3" json:"input_path,omitempty"`                      // relative
	BuildFlag        []string `protobuf:"bytes,3,rep,name=build_flag,json=buildFlag,proto3" json:"build_flag,omitempty"`
}

func (x *BuildRequest) Reset() {
	*x = BuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_builder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildRequest) ProtoMessage() {}

func (x *BuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildRequest.ProtoReflect.Descriptor instead.
func (*BuildRequest) Descriptor() ([]byte, []int) {
	return file_builder_proto_rawDescGZIP(), []int{3}
}

func (x *BuildRequest) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *BuildRequest) GetInputPath() []string {
	if x != nil {
		return x.InputPath
	}
	return nil
}

func (x *BuildRequest) GetBuildFlag() []string {
	if x != nil {
		return x.BuildFlag
	}
	return nil
}

type BuildProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Build artifact paths (possibly empty, e.g. in keepalive progress updates),
	// e.g. build/emacs/emacs-amd64-26.2.squashfs.
	OutputPath []string `protobuf:"bytes,1,rep,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"` // relative
}

func (x *BuildProgress) Reset() {
	*x = BuildProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_builder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildProgress) ProtoMessage() {}

func (x *BuildProgress) ProtoReflect() protoreflect.Message {
	mi := &file_builder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildProgress.ProtoReflect.Descriptor instead.
func (*BuildProgress) Descriptor() ([]byte, []int) {
	return file_builder_proto_rawDescGZIP(), []int{4}
}

func (x *BuildProgress) GetOutputPath() []string {
	if x != nil {
		return x.OutputPath
	}
	return nil
}

var File_builder_proto protoreflect.FileDescriptor

var file_builder_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x0f, 0x0a, 0x0d, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x0f,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x79, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x30,
	0x0a, 0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x32, 0xb2, 0x01, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x0e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x1a, 0x16, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x3a, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x15, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x18, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x22, 0x00, 0x30, 0x01, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_builder_proto_rawDescOnce sync.Once
	file_builder_proto_rawDescData = file_builder_proto_rawDesc
)

func file_builder_proto_rawDescGZIP() []byte {
	file_builder_proto_rawDescOnce.Do(func() {
		file_builder_proto_rawDescData = protoimpl.X.CompressGZIP(file_builder_proto_rawDescData)
	})
	return file_builder_proto_rawDescData
}

var file_builder_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_builder_proto_goTypes = []interface{}{
	(*Chunk)(nil),           // 0: builder.Chunk
	(*StoreResponse)(nil),   // 1: builder.StoreResponse
	(*RetrieveRequest)(nil), // 2: builder.RetrieveRequest
	(*BuildRequest)(nil),    // 3: builder.BuildRequest
	(*BuildProgress)(nil),   // 4: builder.BuildProgress
}
var file_builder_proto_depIdxs = []int32{
	0, // 0: builder.Build.Store:input_type -> builder.Chunk
	3, // 1: builder.Build.Build:input_type -> builder.BuildRequest
	2, // 2: builder.Build.Retrieve:input_type -> builder.RetrieveRequest
	1, // 3: builder.Build.Store:output_type -> builder.StoreResponse
	4, // 4: builder.Build.Build:output_type -> builder.BuildProgress
	0, // 5: builder.Build.Retrieve:output_type -> builder.Chunk
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_builder_proto_init() }
func file_builder_proto_init() {
	if File_builder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_builder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_builder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_builder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_builder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_builder_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_builder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_builder_proto_goTypes,
		DependencyIndexes: file_builder_proto_depIdxs,
		MessageInfos:      file_builder_proto_msgTypes,
	}.Build()
	File_builder_proto = out.File
	file_builder_proto_rawDesc = nil
	file_builder_proto_goTypes = nil
	file_builder_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BuildClient is the client API for Build service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuildClient interface {
	// Store persists a file on the builder.
	//
	// Simple implementations might write the file to a directory and clean up
	// files older than a day every hour in a background (e.g. cron) job.
	//
	// Cluster implementations might write the file to a shared network directory
	// (most pragmatic/common), introduce an custom disk abstraction layer (most
	// elegant?) or stickily load-balance via a proxy job (only listed for
	// completeness as it limits build throughput).
	//
	// Cloud implementations might write the file to a key/value store with a TTL
	// of one day.
	//
	// Files are transferred as a stream of chunks with size 4096 bytes.
	Store(ctx context.Context, opts ...grpc.CallOption) (Build_StoreClient, error)
	// Build ensures the specified input_path are available in the current working
	// directory, changes into working_directory, then runs a distri build with
	// any additional build_flag specified.
	//
	// Build output artifacts paths are streamed in BuildProgress messages.
	Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (Build_BuildClient, error)
	// Retrieve streams the file located at path in chunks of size 4096 bytes.
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (Build_RetrieveClient, error)
}

type buildClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildClient(cc grpc.ClientConnInterface) BuildClient {
	return &buildClient{cc}
}

func (c *buildClient) Store(ctx context.Context, opts ...grpc.CallOption) (Build_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Build_serviceDesc.Streams[0], "/builder.Build/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildStoreClient{stream}
	return x, nil
}

type Build_StoreClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*StoreResponse, error)
	grpc.ClientStream
}

type buildStoreClient struct {
	grpc.ClientStream
}

func (x *buildStoreClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buildStoreClient) CloseAndRecv() (*StoreResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildClient) Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (Build_BuildClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Build_serviceDesc.Streams[1], "/builder.Build/Build", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Build_BuildClient interface {
	Recv() (*BuildProgress, error)
	grpc.ClientStream
}

type buildBuildClient struct {
	grpc.ClientStream
}

func (x *buildBuildClient) Recv() (*BuildProgress, error) {
	m := new(BuildProgress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (Build_RetrieveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Build_serviceDesc.Streams[2], "/builder.Build/Retrieve", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildRetrieveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Build_RetrieveClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type buildRetrieveClient struct {
	grpc.ClientStream
}

func (x *buildRetrieveClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BuildServer is the server API for Build service.
type BuildServer interface {
	// Store persists a file on the builder.
	//
	// Simple implementations might write the file to a directory and clean up
	// files older than a day every hour in a background (e.g. cron) job.
	//
	// Cluster implementations might write the file to a shared network directory
	// (most pragmatic/common), introduce an custom disk abstraction layer (most
	// elegant?) or stickily load-balance via a proxy job (only listed for
	// completeness as it limits build throughput).
	//
	// Cloud implementations might write the file to a key/value store with a TTL
	// of one day.
	//
	// Files are transferred as a stream of chunks with size 4096 bytes.
	Store(Build_StoreServer) error
	// Build ensures the specified input_path are available in the current working
	// directory, changes into working_directory, then runs a distri build with
	// any additional build_flag specified.
	//
	// Build output artifacts paths are streamed in BuildProgress messages.
	Build(*BuildRequest, Build_BuildServer) error
	// Retrieve streams the file located at path in chunks of size 4096 bytes.
	Retrieve(*RetrieveRequest, Build_RetrieveServer) error
}

// UnimplementedBuildServer can be embedded to have forward compatible implementations.
type UnimplementedBuildServer struct {
}

func (*UnimplementedBuildServer) Store(Build_StoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (*UnimplementedBuildServer) Build(*BuildRequest, Build_BuildServer) error {
	return status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (*UnimplementedBuildServer) Retrieve(*RetrieveRequest, Build_RetrieveServer) error {
	return status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}

func RegisterBuildServer(s *grpc.Server, srv BuildServer) {
	s.RegisterService(&_Build_serviceDesc, srv)
}

func _Build_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuildServer).Store(&buildStoreServer{stream})
}

type Build_StoreServer interface {
	SendAndClose(*StoreResponse) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type buildStoreServer struct {
	grpc.ServerStream
}

func (x *buildStoreServer) SendAndClose(m *StoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buildStoreServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Build_Build_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuildServer).Build(m, &buildBuildServer{stream})
}

type Build_BuildServer interface {
	Send(*BuildProgress) error
	grpc.ServerStream
}

type buildBuildServer struct {
	grpc.ServerStream
}

func (x *buildBuildServer) Send(m *BuildProgress) error {
	return x.ServerStream.SendMsg(m)
}

func _Build_Retrieve_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RetrieveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuildServer).Retrieve(m, &buildRetrieveServer{stream})
}

type Build_RetrieveServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type buildRetrieveServer struct {
	grpc.ServerStream
}

func (x *buildRetrieveServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

var _Build_serviceDesc = grpc.ServiceDesc{
	ServiceName: "builder.Build",
	HandlerType: (*BuildServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _Build_Store_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Build",
			Handler:       _Build_Build_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Retrieve",
			Handler:       _Build_Retrieve_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "builder.proto",
}
