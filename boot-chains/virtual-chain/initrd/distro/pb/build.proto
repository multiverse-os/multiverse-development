// https://developers.google.com/protocol-buffers/docs/proto
syntax = "proto2";

option go_package = ".;pb";

package pb;

message BuildStep {
  // argv to pass to execve(2)
  repeated string argv = 1;
}

message CBuilder {
  // Additional flag to pass to `configure`.
  repeated string extra_configure_flag = 1;

  // Additional flag to pass to `make`.
  repeated string extra_make_flag = 4;

  // Whether to run autoreconf(1)
  optional bool autoreconf = 5;

  // Additional flag to append to the `LDFLAGS` environment variable when
  // building.
  repeated string extra_ldflag = 3;
}

message CMakeBuilder {
  // Additional flag to pass to cmake(1), e.g.:
  // extra_cmake_flag: "-DKICAD_SCRIPTING_WXPYTHON_PHOENIX:BOOL=true"
  repeated string extra_cmake_flag = 1;
}

message MesonBuilder {
  // Additional flag to pass to meson(1), e.g.:
  // extra_meson_flag: "-Dsystemdsystemunitdir=${DISTRI_PREFIX}/lib/systemd/system"
  repeated string extra_meson_flag = 1;
}

message PerlBuilder {
  // Extra flags to be specified when running Makefile.PL, e.g.
  // EXPATLIBPATH=/ro/expat-2.2.6/buildoutput/lib
  repeated string extra_makefile_flag = 1;
}

message PythonBuilder {
}

message GomodBuilder {
}

message GoBuilder {
  // Additional flags to pass to “go install”, e.g. “./...” or “cmd/distri”.
  optional string install = 1;

  // Import path of the package that is being built,
  // e.g. “github.com/junegunn/fzf”.
  //
  // Derived from the source URL by default; should usually not be specified.
  optional string import_path = 2;

  // Additional go environment variable to set when calling e.g. “go install”.
  // E.g. go_env: "CGO_ENABLED=0"
  repeated string go_env = 3;
}

message Install {
  repeated string systemd_unit = 1;

  message Symlink {
    // The symbolic link target.
    optional string oldname = 1;
    // The filename of the symbolic link to create.
    optional string newname = 2; // relative to ${DISTRI_PREFIX}/out
  }
  // Create a symbolic link.
  repeated Symlink symlink = 2;

  // Create an empty directory with the specified name.
  repeated string empty_dir = 3; // relative to ${DISTRI_PREFIX}/out

  message Chmod {
    // Whether to set the setuid bit.
    optional bool setuid = 1;
    // TODO: rename to filename for consistency
    // The filename of the file whose mode to change
    optional string name = 2; // relative to ${DISTRI_PREFIX}/out
  }
  // Change the mode of a file.
  repeated Chmod chmod = 4;

  message Cap {
    optional string capability = 2; // specified in cap_from_text(3)
    optional string filename = 1; // relative to ${DISTRI_PREFIX}
  }
  // Apply a file-based capability.
  repeated Cap capability = 5;

  message File {
    optional string srcpath = 1; // relative to ${DISTRI_SOURCEDIR}
    optional string destpath = 2; // relative to ${DISTRI_PREFIX}
  }
  // Install a file.
  repeated File file = 6;

  message Rename {
    optional string oldname = 1; // relative to ${DISTRI_PREFIX}/out
    optional string newname = 2; // relative to ${DISTRI_PREFIX}/out
  }
  // Rename an installed file.
  repeated Rename rename = 7;

  // Delete a file.
  repeated string delete = 8; // relative to ${DISTRI_PREFIX}/out
}

message Claim {
  // glob pattern, interpreted by Go’s
  // https://golang.org/pkg/path/filepath/#Glob
  optional string glob = 1; // required

  // Overwrite the destination directory within the split package.
  optional string dir = 2;
}

message SplitPackage {
  // Name of the split package, e.g. gcc-libs
  optional string name = 1; // required

  // A claim specifies which files this split package claims for itself.
  repeated Claim claim = 3; // required

  // Additional run-time dependencies which are not automatically found, for
  // this split package.
  repeated string runtime_dep = 2;
}

message Union {
  // Directory (within the package) to overlay on top of pkg,
  // e.g. “out/lib/irssi/modules”
  optional string dir = 1; // required
  
  // distri package on top of which to overlay our files, e.g. “irssi”
  optional string pkg = 2; // required
}

message RegexpReplaceAll {
  optional string expr = 1;
  optional string repl = 2;
}

message Pull {
  // URL (https:// preferred, http:// accepted) to a Debian repository Packages
  // file. E.g. https://dl.google.com/linux/chrome/deb/dists/stable/main/binary-amd64/Packages
  optional string debian_packages = 1;

  // URL (https:// preferred, http:// accepted) to a page listing at least the
  // latest release (or multiple releases).
  optional string releases_url = 2;

  // Go regexp (see https://golang.org/pkg/regexp/) for matching upstream
  // releases. The first capture group is expected to capture the upstream
  // version number.
  optional string release_regexp = 3;

  // Go regexp (see https://golang.org/pkg/regexp/) for replacing matches in the
  // version number. Can be used e.g. to convert _ to . (see pkgs/nss).
  optional RegexpReplaceAll release_replace_all = 4;
}

message Build {

  // ┌─────────────────────────────────────────────────────────────────────────┐
  // │ source                                                                  │
  // └─────────────────────────────────────────────────────────────────────────┘

  // A https URL to the upstream archive that should be built. Currently, only
  // tar.gz archives are supported.
  optional string source = 1;

  // Details about how to pull a new version.
  optional Pull pull = 19;

  // A SHA256 hash of the upstream archive, for verifying integrity.
  optional string hash = 2;

  // The version number of this package, in format
  // `<upstream-version>-<distri-revision>`, e.g. `2.12-4`. The distri package
  // revision is a monotonically increasing number (even when the upstream
  // version changes!).
  //
  // The name of the package is the directory which contains `build.textproto`,
  // and the resulting package will be named `<package-name>-<version>`, so a
  // full package can be referenced by e.g. `i3status-amd64-2.12-4`.
  optional string version = 3;

  // The filename of a file (relative to the directory containing `build.textproto`)
  // to copy into the source directory as-is. Could also be achieved by using
  // `cherry_pick`, but files are a little bit easier to maintain this way.
  repeated string extra_file = 17;

  // The filename of a patch (relative to the directory containing
  // `build.textproto`) to apply after extracting the upstream archive. The
  // order of directives is the order in which the patches are applied.
  repeated string cherry_pick = 6;

  // Enable writable_sourcedir if the package modifies files in its SourceDir
  // (instead of only placing files in the build directory).
  // A bug should be reported with the package upstream.
  //
  // Frequently also requires enabling in_tree_build.
  optional bool writable_sourcedir = 20;

  // Enable if this package does not support building from a separate directory
  // (sometimes called “out-of-tree build”). A bug should be reported with the
  // package upstream.
  optional bool in_tree_build = 21;

  // By default, distri build will fail if there are empty .debug files.
  // Use this option to acknowledge the failure and add a free-form note
  // (for human consumption) with details.
  // E.g. ack_missing_dwarf: "TODO" if the failure is not yet understood.
  optional string ack_missing_dwarf = 22;

  // ┌─────────────────────────────────────────────────────────────────────────┐
  // │ builder                                                                 │
  // └─────────────────────────────────────────────────────────────────────────┘

  // TODO: rename to build_dep
  repeated string dep = 5;

  // TODO: move this field into a custom builder
  // Overwrites the chosen builder’s default build steps.
  repeated BuildStep build_step = 4;

  oneof builder {
    // The cbuilder builds autoconf (or compatible) projects.
    CBuilder cbuilder = 7;

    // The cmakebuilder builds CMake projects.
    CMakeBuilder cmakebuilder = 14;

    // The meson builder builds meson projects.
    MesonBuilder mesonbuilder = 16;

    // The perlbuilder builds Perl projects.
    PerlBuilder perlbuilder = 10;

    // The pythonbuilder builds Python projects.
    PythonBuilder pythonbuilder = 12;

    // The gomodbuilder captures the module cache of the specified module. The
    // resulting package is meant to be used as build dependency for gobuilder
    // packages.
    GomodBuilder gomodbuilder = 13;
    
    // The gobuilder builds Go projects.
    GoBuilder gobuilder = 18;
  }

  // ┌─────────────────────────────────────────────────────────────────────────┐
  // │ package building                                                        │
  // └─────────────────────────────────────────────────────────────────────────┘

  // Additional run-time dependencies which are not automatically found.
  repeated string runtime_dep = 9;

  // Additional steps to perform after the build completed.
  optional Install install = 8;

  // Split files out of the resulting package into separate packages. This
  // feature should be used sparingly: prefer sticking to the mental model that
  // one package build instruction file results in one distri package.
  //
  // Use cases include fine grained dependencies (e.g. gcc-libs split out of
  // gcc) or breaking dependency cycles for bootstrap packages (e.g. libudev
  // split out of systemd).
  repeated SplitPackage split_package = 11;

  // Runtime union directories are used to implement per-package exchange
  // directories (as opposed to global exchange directories). This is to be used
  // for tight coupling situations, e.g. when a plugin mechanism does not
  // guarantee ABI compatibility across versions.
  repeated Union runtime_union = 15;

  // NEXT FREE FIELD NUMBER: 23
}
