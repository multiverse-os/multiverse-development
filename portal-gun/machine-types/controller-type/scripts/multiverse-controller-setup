

apt-get update
apt-get upgrade -y

echo $text"Installing base Multiverse OS Host Machine packages: [ovmf, qemu, git, vim, sudo, virt-manager, pass, dirmngr, ssh]"$reset
apt install -y git patch rsync pass gnupg2 ssh ssh-askpass tor tree sudo dirmngr \
	qemu qemu-kvm qemu-utils ovmf \
	qemu-system-common qemu-system-x86 qemu-user-static qemu-utils libpam-cap \
	libvirt0 libvirt-dev libvirt-clients virt-manager libvirt-daemon libvirt-daemon-system \
	pkg-config libfile-fcntllock-perl \
	bridge-utils ebtables libxml2-utils netcat-openbsd iproute2 dmidecode dnsmasq-base

# This line only works in Debian Buster, the packages have a different name in Debian Stretch
apt install -y gir1.2-spiceclientglib-2.0 gir1.2-spiceclientgtk-3.0


# ======================================
#                 __   
#      /\/\ \_\ \_ \ \ V E R S E 
#
# ======================================
#  # Global Variables
#  Variables relating to Multiverse OS
# --------------------------------------
MV_USER="user"
MV_GROUP="libvirt"
MV_CONFIG_PATH="/var/multiverse"
USER_HOME="/home/user"
MV_PATH="$USER_HOME/multiverse"
GIT_SRC_DIR="$USER_HOME/multiverse"
CURRENT_USER=$(whoami)
#### NOTE ####
## TODO
## should check if sudo version is > 1.6.8p12-2 and if ENV includes sbins
## to avoid binary not found errors from the sbins not being in $PATH
## (as of that version need to 'su -' instead of 'su' to get paths included in env)
##
if [ $CURRENT_USER = "user" ]; then
  echo $fail"[Error] Must be logged in as root. Run 'su -' and try again."$reset
  exit 0
fi
if grep -q Intel /proc/cpuinfo; then
  CPU_TYPE="Intel"
elif grep -q AMD /proc/cpuinfo; then
  CPU_TYPE="AMD"
else
  echo $fail"[Error] Failed to detect CPU manufacturer."$reset
  exit 0
fi
# ======================================
#
#   Multiverse OS Script Color Palette
# --------------------------------------
header="\e[0;95m"
accent="\e[37m"
subheader="\e[98m"
strong="\e[96m"
text="\e[94m"
success="\e[92m"
warning="\e[93m"
fail="\e[91m"
reset="\e[0m"
# ======================================
## NOTE =======================================================
##   
##  We should be setting up an alternate hard disk from the
##  original Host Machine OS install for either direct pass-
##  through or via folder passthrough. Preferably the first
##  option so that the USER encryption password is NOT stored
##  on the Host Machine. 
##
##  The Hard-disk that is passed either way is the 'mirror' 
##  drive in this instance and is used in such a way that
##  all the primary file storage. Since typically the OS
##  drive of our Controller and Host machine are smaller 
##  and use of symbolic links and secondary drive is used
##  to shift the bulk of the user files onto larger file-
##  systems
## 
# =============================================================

echo $text"Removing unncessary folders from Multiverse user 'user': [Documents, Downloads, Music, Pictures, Public, Templates, Videos]"$reset
rmdir $USER_HOME/Documents/
rmdir $USER_HOME/Downloads/
rmdir $USER_HOME/Music/
rmdir $USER_HOME/Pictures/
rmdir $USER_HOME/Public/
rmdir $USER_HOME/Templates/
rmdir $USER_HOME/Videos/

echo $text"Creating Multiverse OS folders: ['$MV_CONFIG_PATH/images/', '$MV_CONFIG_PATH/images/os-images', '$MV_CONFIG_PATH/images/app-images', '$MV_CONFIG_PATH/machines/']"$reset
mkdir -p $MV_CONFIG_PATH/images/
mkdir -p $MV_CONFIG_PATH/images/os-images
mkdir -p $MV_CONFIG_PATH/images/app-images
mkdir -p $MV_CONFIG_PATH/machines/

chown -R user:user $MV_CONFIG_PATH
chmod -R 711 $MV_CONFIG_PATH

## This folder automatically gets created by libvirt, but in case it doesn't exist yet...
if [ ! -d "$USER_HOME/.local/share/libvirt" ]; then
	mkdir -p $USER_HOME/.local/share/libvirt
fi
## Make a symlink to the multiverse image folder because libvirt really wants its 'libvirt/images' folder
if [ -d ".local/share/libvirt/images" ]; then
	rmdir $USER_HOME/.local/share/libvirt/images
fi

ln -s $MV_CONFIG_PATH/images $USER_HOME/.local/share/libvirt/images
chown -R user:user $USER_HOME/.local/share/libvirt
chmod 755 $USER_HOME/.local/share/libvirt

## NOTE =======================================================
## The previous script version had cloning of the multiverse repo and running the iso download-and-verify scripts
## Maybe that stuff can be copied from the host, though


echo $strong"Setting generic git user and name to increase ones psuedoanonymity (do not change this, define this in your development application VMs)..."$reset
git config --global user.email "you@example.com"
git config --global user.name "Your Name"
sudo -u user -H git config --global user.email "you@example.com"
sudo -u user -H git config --global user.name "Your Name"


## NOTE
##
##   As Multiverse OS moves away from 'libvirt' we will want to create a multiverse
##   group and apply this to the user. And use this instead of libvirt to apply 
##   permissions.

echo $strong"Add groups to generic Multiverse OS user 'user': [kvm, libvirt]..."$reset

#### NOTE ####
## If you get a 'usermod: not found' error, it's because the sudo version is > 1.6.8p12-2
## and you need to use 'su -' instead of 'su' to get the sbins in the $PATH
##
usermod -a -G kvm user
usermod -a -G libvirt user

echo $strong"Copy limits.conf file from$accent host.multiverse$reset machines folder to '/etc/security'..."$reset
cp $GIT_SRC_DIR/host/base-files/etc/security/limits.conf /etc/security

#### NOTES ####
## this following is in the process of being replaced as we transition away from libvirt and virsh
## TODO
## We have the new replacement networking figured out, need to add it to script
##
#echo $strong"Deleting default virtaul network 'default'..."$reset
virsh net-undefine default
virsh net-destroy default
echo $strong"Creating three libvirt virtual networks for the Controller VM environment: [virbr0, virbr1, virbr2]"$reset
echo $text"These have different subnets from the Host Machine versions"$reset
echo $accent"virbr0: 10.10.10.0/24"$reset
echo $accent"virbr1: 10.11.11.0/24"$reset
echo $accent"virbr2: 10.12.12.0/24"$reset
virsh net-define $GIT_SRC_DIR/portal-gun/portals/controller.portals/interface.controller.portals/debian9.interface.portal/xml/networks/virbr0.xml
virsh net-define $GIT_SRC_DIR/portal-gun/portals/controller.portals/interface.controller.portals/debian9.interface.portal/xml/networks/virbr1.xml
virsh net-define $GIT_SRC_DIR/portal-gun/portals/controller.portals/interface.controller.portals/debian9.interface.portal/xml/networks/virbr2.xml

echo $text"Setting autostart on each virtual network: [virbr0, virbr1, virbr2]"$reset
virsh net-autostart virbr0
virsh net-autostart virbr1
virsh net-autostart virbr2

echo $strong"Creating '/etc/qemu' folder..."$reset
mkdir -p /etc/qemu

## NOTE
##   Move away from using echo's into files and instead use templates, as it
##   is better capble of supporting re-install without issues and makes it easier to 
##   update from templates making everything more consistent and less inline shell
##   script changing
#
echo $strong"Creating '/etc/qemu/bridge.conf' file to allow unpriviledged access to virbrX..."$reset
echo $text"Adding 'allow virbrX' to allow unpriviledged access to virtual bridges..."$reset
echo "allow virbr0" > /etc/qemu/bridge.conf
echo "allow virbr1" >> /etc/qemu/bridge.conf
echo "allow virbr2" >> /etc/qemu/bridge.conf

echo $text"Setting permissions on '/usr/lib/qemu/qemu-bridge-helper' for group 'libvirt'..."$reset
chown -R root:libvirt /usr/lib/qemu/
chmod 4750 /usr/lib/qemu/qemu-bridge-helper

#### NOTES ####
## this following is in the process of being replaced as we transition away from libvirt and virsh
##
# Add storage pools to user session
echo $strong"Configuring virtual machine storage pools"$reset
sudo -u user virsh pool-define $GIT_SRC_DIR/portal-gun/portals/controller.portals/interface.controller.portals/debian9.interface.portal/xml/storage/images.xml
sudo -u user virsh pool-define $GIT_SRC_DIR/portal-gun/portals/controller.portals/interface.controller.portals/debian9.interface.portal/xml/storage/app-images.xml
sudo -u user virsh pool-define $GIT_SRC_DIR/portal-gun/portals/controller.portals/interface.controller.portals/debian9.interface.portal/xml/storage/os-images.xml
sudo -u user virsh pool-define $GIT_SRC_DIR/portal-gun/portals/controller.portals/interface.controller.portals/debian9.interface.portal/xml/storage/machines.xml

echo $strong"Configuring storage pools to start on boot..."$reset
sudo -u user virsh pool-autostart images
sudo -u user virsh pool-autostart app-images
sudo -u user virsh pool-autostart os-images
sudo -u user virsh pool-autostart machines

# NOTE Better to use template instead of this because it allows for rerunning this script wtihout iwssue
if [ $CPU_TYPE = "Intel" ]; then
  echo $strong"Adding modules to '/etc/modules': [kvm, kvm_intel, 9p, 9pnet, 9pnet_virtio]"$reset
  echo "kvm_intel" > /etc/modules
elif [ $CPU_TYPE = "AMD" ]; then
  echo $strong"Adding modules to '/etc/modules': [kvm, kvm_amd, 9p, 9pnet, 9pnet_virtio]"$reset
  echo "kvm_amd" > /etc/modules
else
  echo $fail"[Error] Failed to detect CPU manufacturer."$reset
  exit 0
fi

echo "kvm" >> /etc/modules
echo "9p" >> /etc/modules
echo "9pnet" >> /etc/modules
echo "9pnet_virtio" >> /etc/modules

echo $strong"[DEV] ADDING 'virt-manager' CONNECTION TO HOST-MACHINE"$reset
echo $text"[DEV] This is a hack until the Host Machine daemon/agent"$reset
echo $text"[DEV] is completed and an API provides functionality to"$reset
echo $text"[DEV] control Router VMs from the Controller VM."$reset

sudo -u user -H gsettings set org.virt-manager.virt-manager.connections uris "['qemu+ssh://user@10.1.1.254/session?socket=/run/user/1000/libvirt/libvirt-sock', 'qemu:///session', 'qemu:///system']"

echo $success"Installation Complete!"$reset

##
## Functionality required by all Controller VMs
##


# *) Setup Tor + SSH Server

# *) Setup Shiftsuit Key tree (onion key, gpg key, ssh key (both rsa and ecdsa), etc)

# *) Setup first Application VMs 
#    * Firefox
#    * Generic Go Development
#    * Generic Ruby Development
#    * Generic Rust Development
#    * Generic C Development

# Replace comments with complex sed/single line editing bash script

## For gaming machines
##
#dpkg --add-architecture i386
#wget https://steamcdn-a.akamaihd.net/client/installer/steam.deb
#sudo apt-get install libgl1-mesa-dri:i386, libgl1-mesa-glx:i386, libc6:i386 git vim 
