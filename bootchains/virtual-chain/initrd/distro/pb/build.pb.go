// https://developers.google.com/protocol-buffers/docs/proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.11.4
// source: build.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BuildStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// argv to pass to execve(2)
	Argv []string `protobuf:"bytes,1,rep,name=argv" json:"argv,omitempty"`
}

func (x *BuildStep) Reset() {
	*x = BuildStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildStep) ProtoMessage() {}

func (x *BuildStep) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildStep.ProtoReflect.Descriptor instead.
func (*BuildStep) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{0}
}

func (x *BuildStep) GetArgv() []string {
	if x != nil {
		return x.Argv
	}
	return nil
}

type CBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Additional flag to pass to `configure`.
	ExtraConfigureFlag []string `protobuf:"bytes,1,rep,name=extra_configure_flag,json=extraConfigureFlag" json:"extra_configure_flag,omitempty"`
	// Additional flag to pass to `make`.
	ExtraMakeFlag []string `protobuf:"bytes,4,rep,name=extra_make_flag,json=extraMakeFlag" json:"extra_make_flag,omitempty"`
	// Whether to run autoreconf(1)
	Autoreconf *bool `protobuf:"varint,5,opt,name=autoreconf" json:"autoreconf,omitempty"`
	// Additional flag to append to the `LDFLAGS` environment variable when
	// building.
	ExtraLdflag []string `protobuf:"bytes,3,rep,name=extra_ldflag,json=extraLdflag" json:"extra_ldflag,omitempty"`
}

func (x *CBuilder) Reset() {
	*x = CBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBuilder) ProtoMessage() {}

func (x *CBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBuilder.ProtoReflect.Descriptor instead.
func (*CBuilder) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{1}
}

func (x *CBuilder) GetExtraConfigureFlag() []string {
	if x != nil {
		return x.ExtraConfigureFlag
	}
	return nil
}

func (x *CBuilder) GetExtraMakeFlag() []string {
	if x != nil {
		return x.ExtraMakeFlag
	}
	return nil
}

func (x *CBuilder) GetAutoreconf() bool {
	if x != nil && x.Autoreconf != nil {
		return *x.Autoreconf
	}
	return false
}

func (x *CBuilder) GetExtraLdflag() []string {
	if x != nil {
		return x.ExtraLdflag
	}
	return nil
}

type CMakeBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Additional flag to pass to cmake(1), e.g.:
	// extra_cmake_flag: "-DKICAD_SCRIPTING_WXPYTHON_PHOENIX:BOOL=true"
	ExtraCmakeFlag []string `protobuf:"bytes,1,rep,name=extra_cmake_flag,json=extraCmakeFlag" json:"extra_cmake_flag,omitempty"`
}

func (x *CMakeBuilder) Reset() {
	*x = CMakeBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMakeBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMakeBuilder) ProtoMessage() {}

func (x *CMakeBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMakeBuilder.ProtoReflect.Descriptor instead.
func (*CMakeBuilder) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{2}
}

func (x *CMakeBuilder) GetExtraCmakeFlag() []string {
	if x != nil {
		return x.ExtraCmakeFlag
	}
	return nil
}

type MesonBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Additional flag to pass to meson(1), e.g.:
	// extra_meson_flag: "-Dsystemdsystemunitdir=${DISTRI_PREFIX}/lib/systemd/system"
	ExtraMesonFlag []string `protobuf:"bytes,1,rep,name=extra_meson_flag,json=extraMesonFlag" json:"extra_meson_flag,omitempty"`
}

func (x *MesonBuilder) Reset() {
	*x = MesonBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MesonBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MesonBuilder) ProtoMessage() {}

func (x *MesonBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MesonBuilder.ProtoReflect.Descriptor instead.
func (*MesonBuilder) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{3}
}

func (x *MesonBuilder) GetExtraMesonFlag() []string {
	if x != nil {
		return x.ExtraMesonFlag
	}
	return nil
}

type PerlBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Extra flags to be specified when running Makefile.PL, e.g.
	// EXPATLIBPATH=/ro/expat-2.2.6/buildoutput/lib
	ExtraMakefileFlag []string `protobuf:"bytes,1,rep,name=extra_makefile_flag,json=extraMakefileFlag" json:"extra_makefile_flag,omitempty"`
}

func (x *PerlBuilder) Reset() {
	*x = PerlBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerlBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerlBuilder) ProtoMessage() {}

func (x *PerlBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerlBuilder.ProtoReflect.Descriptor instead.
func (*PerlBuilder) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{4}
}

func (x *PerlBuilder) GetExtraMakefileFlag() []string {
	if x != nil {
		return x.ExtraMakefileFlag
	}
	return nil
}

type PythonBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PythonBuilder) Reset() {
	*x = PythonBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonBuilder) ProtoMessage() {}

func (x *PythonBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonBuilder.ProtoReflect.Descriptor instead.
func (*PythonBuilder) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{5}
}

type GomodBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GomodBuilder) Reset() {
	*x = GomodBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GomodBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GomodBuilder) ProtoMessage() {}

func (x *GomodBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GomodBuilder.ProtoReflect.Descriptor instead.
func (*GomodBuilder) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{6}
}

type GoBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Additional flags to pass to “go install”, e.g. “./...” or “cmd/distri”.
	Install *string `protobuf:"bytes,1,opt,name=install" json:"install,omitempty"`
	// Import path of the package that is being built,
	// e.g. “github.com/junegunn/fzf”.
	//
	// Derived from the source URL by default; should usually not be specified.
	ImportPath *string `protobuf:"bytes,2,opt,name=import_path,json=importPath" json:"import_path,omitempty"`
	// Additional go environment variable to set when calling e.g. “go install”.
	// E.g. go_env: "CGO_ENABLED=0"
	GoEnv []string `protobuf:"bytes,3,rep,name=go_env,json=goEnv" json:"go_env,omitempty"`
}

func (x *GoBuilder) Reset() {
	*x = GoBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoBuilder) ProtoMessage() {}

func (x *GoBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoBuilder.ProtoReflect.Descriptor instead.
func (*GoBuilder) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{7}
}

func (x *GoBuilder) GetInstall() string {
	if x != nil && x.Install != nil {
		return *x.Install
	}
	return ""
}

func (x *GoBuilder) GetImportPath() string {
	if x != nil && x.ImportPath != nil {
		return *x.ImportPath
	}
	return ""
}

func (x *GoBuilder) GetGoEnv() []string {
	if x != nil {
		return x.GoEnv
	}
	return nil
}

type Install struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemdUnit []string `protobuf:"bytes,1,rep,name=systemd_unit,json=systemdUnit" json:"systemd_unit,omitempty"`
	// Create a symbolic link.
	Symlink []*Install_Symlink `protobuf:"bytes,2,rep,name=symlink" json:"symlink,omitempty"`
	// Create an empty directory with the specified name.
	EmptyDir []string `protobuf:"bytes,3,rep,name=empty_dir,json=emptyDir" json:"empty_dir,omitempty"` // relative to ${DISTRI_PREFIX}/out
	// Change the mode of a file.
	Chmod []*Install_Chmod `protobuf:"bytes,4,rep,name=chmod" json:"chmod,omitempty"`
	// Apply a file-based capability.
	Capability []*Install_Cap `protobuf:"bytes,5,rep,name=capability" json:"capability,omitempty"`
	// Install a file.
	File []*Install_File `protobuf:"bytes,6,rep,name=file" json:"file,omitempty"`
	// Rename an installed file.
	Rename []*Install_Rename `protobuf:"bytes,7,rep,name=rename" json:"rename,omitempty"`
	// Delete a file.
	Delete []string `protobuf:"bytes,8,rep,name=delete" json:"delete,omitempty"` // relative to ${DISTRI_PREFIX}/out
}

func (x *Install) Reset() {
	*x = Install{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Install) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Install) ProtoMessage() {}

func (x *Install) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Install.ProtoReflect.Descriptor instead.
func (*Install) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{8}
}

func (x *Install) GetSystemdUnit() []string {
	if x != nil {
		return x.SystemdUnit
	}
	return nil
}

func (x *Install) GetSymlink() []*Install_Symlink {
	if x != nil {
		return x.Symlink
	}
	return nil
}

func (x *Install) GetEmptyDir() []string {
	if x != nil {
		return x.EmptyDir
	}
	return nil
}

func (x *Install) GetChmod() []*Install_Chmod {
	if x != nil {
		return x.Chmod
	}
	return nil
}

func (x *Install) GetCapability() []*Install_Cap {
	if x != nil {
		return x.Capability
	}
	return nil
}

func (x *Install) GetFile() []*Install_File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Install) GetRename() []*Install_Rename {
	if x != nil {
		return x.Rename
	}
	return nil
}

func (x *Install) GetDelete() []string {
	if x != nil {
		return x.Delete
	}
	return nil
}

type Claim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// glob pattern, interpreted by Go’s
	// https://golang.org/pkg/path/filepath/#Glob
	Glob *string `protobuf:"bytes,1,opt,name=glob" json:"glob,omitempty"` // required
	// Overwrite the destination directory within the split package.
	Dir *string `protobuf:"bytes,2,opt,name=dir" json:"dir,omitempty"`
}

func (x *Claim) Reset() {
	*x = Claim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim) ProtoMessage() {}

func (x *Claim) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim.ProtoReflect.Descriptor instead.
func (*Claim) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{9}
}

func (x *Claim) GetGlob() string {
	if x != nil && x.Glob != nil {
		return *x.Glob
	}
	return ""
}

func (x *Claim) GetDir() string {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return ""
}

type SplitPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the split package, e.g. gcc-libs
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"` // required
	// A claim specifies which files this split package claims for itself.
	Claim []*Claim `protobuf:"bytes,3,rep,name=claim" json:"claim,omitempty"` // required
	// Additional run-time dependencies which are not automatically found, for
	// this split package.
	RuntimeDep []string `protobuf:"bytes,2,rep,name=runtime_dep,json=runtimeDep" json:"runtime_dep,omitempty"`
}

func (x *SplitPackage) Reset() {
	*x = SplitPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitPackage) ProtoMessage() {}

func (x *SplitPackage) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitPackage.ProtoReflect.Descriptor instead.
func (*SplitPackage) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{10}
}

func (x *SplitPackage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SplitPackage) GetClaim() []*Claim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *SplitPackage) GetRuntimeDep() []string {
	if x != nil {
		return x.RuntimeDep
	}
	return nil
}

type Union struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Directory (within the package) to overlay on top of pkg,
	// e.g. “out/lib/irssi/modules”
	Dir *string `protobuf:"bytes,1,opt,name=dir" json:"dir,omitempty"` // required
	// distri package on top of which to overlay our files, e.g. “irssi”
	Pkg *string `protobuf:"bytes,2,opt,name=pkg" json:"pkg,omitempty"` // required
}

func (x *Union) Reset() {
	*x = Union{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Union) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Union) ProtoMessage() {}

func (x *Union) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Union.ProtoReflect.Descriptor instead.
func (*Union) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{11}
}

func (x *Union) GetDir() string {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return ""
}

func (x *Union) GetPkg() string {
	if x != nil && x.Pkg != nil {
		return *x.Pkg
	}
	return ""
}

type RegexpReplaceAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *string `protobuf:"bytes,1,opt,name=expr" json:"expr,omitempty"`
	Repl *string `protobuf:"bytes,2,opt,name=repl" json:"repl,omitempty"`
}

func (x *RegexpReplaceAll) Reset() {
	*x = RegexpReplaceAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexpReplaceAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexpReplaceAll) ProtoMessage() {}

func (x *RegexpReplaceAll) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexpReplaceAll.ProtoReflect.Descriptor instead.
func (*RegexpReplaceAll) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{12}
}

func (x *RegexpReplaceAll) GetExpr() string {
	if x != nil && x.Expr != nil {
		return *x.Expr
	}
	return ""
}

func (x *RegexpReplaceAll) GetRepl() string {
	if x != nil && x.Repl != nil {
		return *x.Repl
	}
	return ""
}

type Pull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL (https:// preferred, http:// accepted) to a Debian repository Packages
	// file. E.g. https://dl.google.com/linux/chrome/deb/dists/stable/main/binary-amd64/Packages
	DebianPackages *string `protobuf:"bytes,1,opt,name=debian_packages,json=debianPackages" json:"debian_packages,omitempty"`
	// URL (https:// preferred, http:// accepted) to a page listing at least the
	// latest release (or multiple releases).
	ReleasesUrl *string `protobuf:"bytes,2,opt,name=releases_url,json=releasesUrl" json:"releases_url,omitempty"`
	// Go regexp (see https://golang.org/pkg/regexp/) for matching upstream
	// releases. The first capture group is expected to capture the upstream
	// version number.
	ReleaseRegexp *string `protobuf:"bytes,3,opt,name=release_regexp,json=releaseRegexp" json:"release_regexp,omitempty"`
	// Go regexp (see https://golang.org/pkg/regexp/) for replacing matches in the
	// version number. Can be used e.g. to convert _ to . (see pkgs/nss).
	ReleaseReplaceAll *RegexpReplaceAll `protobuf:"bytes,4,opt,name=release_replace_all,json=releaseReplaceAll" json:"release_replace_all,omitempty"`
}

func (x *Pull) Reset() {
	*x = Pull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pull) ProtoMessage() {}

func (x *Pull) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pull.ProtoReflect.Descriptor instead.
func (*Pull) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{13}
}

func (x *Pull) GetDebianPackages() string {
	if x != nil && x.DebianPackages != nil {
		return *x.DebianPackages
	}
	return ""
}

func (x *Pull) GetReleasesUrl() string {
	if x != nil && x.ReleasesUrl != nil {
		return *x.ReleasesUrl
	}
	return ""
}

func (x *Pull) GetReleaseRegexp() string {
	if x != nil && x.ReleaseRegexp != nil {
		return *x.ReleaseRegexp
	}
	return ""
}

func (x *Pull) GetReleaseReplaceAll() *RegexpReplaceAll {
	if x != nil {
		return x.ReleaseReplaceAll
	}
	return nil
}

type Build struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A https URL to the upstream archive that should be built. Currently, only
	// tar.gz archives are supported.
	Source *string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	// Details about how to pull a new version.
	Pull *Pull `protobuf:"bytes,19,opt,name=pull" json:"pull,omitempty"`
	// A SHA256 hash of the upstream archive, for verifying integrity.
	Hash *string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	// The version number of this package, in format
	// `<upstream-version>-<distri-revision>`, e.g. `2.12-4`. The distri package
	// revision is a monotonically increasing number (even when the upstream
	// version changes!).
	//
	// The name of the package is the directory which contains `build.textproto`,
	// and the resulting package will be named `<package-name>-<version>`, so a
	// full package can be referenced by e.g. `i3status-amd64-2.12-4`.
	Version *string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	// The filename of a file (relative to the directory containing `build.textproto`)
	// to copy into the source directory as-is. Could also be achieved by using
	// `cherry_pick`, but files are a little bit easier to maintain this way.
	ExtraFile []string `protobuf:"bytes,17,rep,name=extra_file,json=extraFile" json:"extra_file,omitempty"`
	// The filename of a patch (relative to the directory containing
	// `build.textproto`) to apply after extracting the upstream archive. The
	// order of directives is the order in which the patches are applied.
	CherryPick []string `protobuf:"bytes,6,rep,name=cherry_pick,json=cherryPick" json:"cherry_pick,omitempty"`
	// Enable writable_sourcedir if the package modifies files in its SourceDir
	// (instead of only placing files in the build directory).
	// A bug should be reported with the package upstream.
	//
	// Frequently also requires enabling in_tree_build.
	WritableSourcedir *bool `protobuf:"varint,20,opt,name=writable_sourcedir,json=writableSourcedir" json:"writable_sourcedir,omitempty"`
	// Enable if this package does not support building from a separate directory
	// (sometimes called “out-of-tree build”). A bug should be reported with the
	// package upstream.
	InTreeBuild *bool `protobuf:"varint,21,opt,name=in_tree_build,json=inTreeBuild" json:"in_tree_build,omitempty"`
	// By default, distri build will fail if there are empty .debug files.
	// Use this option to acknowledge the failure and add a free-form note
	// (for human consumption) with details.
	// E.g. ack_missing_dwarf: "TODO" if the failure is not yet understood.
	AckMissingDwarf *string `protobuf:"bytes,22,opt,name=ack_missing_dwarf,json=ackMissingDwarf" json:"ack_missing_dwarf,omitempty"`
	// TODO: rename to build_dep
	Dep []string `protobuf:"bytes,5,rep,name=dep" json:"dep,omitempty"`
	// TODO: move this field into a custom builder
	// Overwrites the chosen builder’s default build steps.
	BuildStep []*BuildStep `protobuf:"bytes,4,rep,name=build_step,json=buildStep" json:"build_step,omitempty"`
	// Types that are assignable to Builder:
	//	*Build_Cbuilder
	//	*Build_Cmakebuilder
	//	*Build_Mesonbuilder
	//	*Build_Perlbuilder
	//	*Build_Pythonbuilder
	//	*Build_Gomodbuilder
	//	*Build_Gobuilder
	Builder isBuild_Builder `protobuf_oneof:"builder"`
	// Additional run-time dependencies which are not automatically found.
	RuntimeDep []string `protobuf:"bytes,9,rep,name=runtime_dep,json=runtimeDep" json:"runtime_dep,omitempty"`
	// Additional steps to perform after the build completed.
	Install *Install `protobuf:"bytes,8,opt,name=install" json:"install,omitempty"`
	// Split files out of the resulting package into separate packages. This
	// feature should be used sparingly: prefer sticking to the mental model that
	// one package build instruction file results in one distri package.
	//
	// Use cases include fine grained dependencies (e.g. gcc-libs split out of
	// gcc) or breaking dependency cycles for bootstrap packages (e.g. libudev
	// split out of systemd).
	SplitPackage []*SplitPackage `protobuf:"bytes,11,rep,name=split_package,json=splitPackage" json:"split_package,omitempty"`
	// Runtime union directories are used to implement per-package exchange
	// directories (as opposed to global exchange directories). This is to be used
	// for tight coupling situations, e.g. when a plugin mechanism does not
	// guarantee ABI compatibility across versions.
	RuntimeUnion []*Union `protobuf:"bytes,15,rep,name=runtime_union,json=runtimeUnion" json:"runtime_union,omitempty"`
}

func (x *Build) Reset() {
	*x = Build{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Build) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Build) ProtoMessage() {}

func (x *Build) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Build.ProtoReflect.Descriptor instead.
func (*Build) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{14}
}

func (x *Build) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *Build) GetPull() *Pull {
	if x != nil {
		return x.Pull
	}
	return nil
}

func (x *Build) GetHash() string {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return ""
}

func (x *Build) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *Build) GetExtraFile() []string {
	if x != nil {
		return x.ExtraFile
	}
	return nil
}

func (x *Build) GetCherryPick() []string {
	if x != nil {
		return x.CherryPick
	}
	return nil
}

func (x *Build) GetWritableSourcedir() bool {
	if x != nil && x.WritableSourcedir != nil {
		return *x.WritableSourcedir
	}
	return false
}

func (x *Build) GetInTreeBuild() bool {
	if x != nil && x.InTreeBuild != nil {
		return *x.InTreeBuild
	}
	return false
}

func (x *Build) GetAckMissingDwarf() string {
	if x != nil && x.AckMissingDwarf != nil {
		return *x.AckMissingDwarf
	}
	return ""
}

func (x *Build) GetDep() []string {
	if x != nil {
		return x.Dep
	}
	return nil
}

func (x *Build) GetBuildStep() []*BuildStep {
	if x != nil {
		return x.BuildStep
	}
	return nil
}

func (m *Build) GetBuilder() isBuild_Builder {
	if m != nil {
		return m.Builder
	}
	return nil
}

func (x *Build) GetCbuilder() *CBuilder {
	if x, ok := x.GetBuilder().(*Build_Cbuilder); ok {
		return x.Cbuilder
	}
	return nil
}

func (x *Build) GetCmakebuilder() *CMakeBuilder {
	if x, ok := x.GetBuilder().(*Build_Cmakebuilder); ok {
		return x.Cmakebuilder
	}
	return nil
}

func (x *Build) GetMesonbuilder() *MesonBuilder {
	if x, ok := x.GetBuilder().(*Build_Mesonbuilder); ok {
		return x.Mesonbuilder
	}
	return nil
}

func (x *Build) GetPerlbuilder() *PerlBuilder {
	if x, ok := x.GetBuilder().(*Build_Perlbuilder); ok {
		return x.Perlbuilder
	}
	return nil
}

func (x *Build) GetPythonbuilder() *PythonBuilder {
	if x, ok := x.GetBuilder().(*Build_Pythonbuilder); ok {
		return x.Pythonbuilder
	}
	return nil
}

func (x *Build) GetGomodbuilder() *GomodBuilder {
	if x, ok := x.GetBuilder().(*Build_Gomodbuilder); ok {
		return x.Gomodbuilder
	}
	return nil
}

func (x *Build) GetGobuilder() *GoBuilder {
	if x, ok := x.GetBuilder().(*Build_Gobuilder); ok {
		return x.Gobuilder
	}
	return nil
}

func (x *Build) GetRuntimeDep() []string {
	if x != nil {
		return x.RuntimeDep
	}
	return nil
}

func (x *Build) GetInstall() *Install {
	if x != nil {
		return x.Install
	}
	return nil
}

func (x *Build) GetSplitPackage() []*SplitPackage {
	if x != nil {
		return x.SplitPackage
	}
	return nil
}

func (x *Build) GetRuntimeUnion() []*Union {
	if x != nil {
		return x.RuntimeUnion
	}
	return nil
}

type isBuild_Builder interface {
	isBuild_Builder()
}

type Build_Cbuilder struct {
	// The cbuilder builds autoconf (or compatible) projects.
	Cbuilder *CBuilder `protobuf:"bytes,7,opt,name=cbuilder,oneof"`
}

type Build_Cmakebuilder struct {
	// The cmakebuilder builds CMake projects.
	Cmakebuilder *CMakeBuilder `protobuf:"bytes,14,opt,name=cmakebuilder,oneof"`
}

type Build_Mesonbuilder struct {
	// The meson builder builds meson projects.
	Mesonbuilder *MesonBuilder `protobuf:"bytes,16,opt,name=mesonbuilder,oneof"`
}

type Build_Perlbuilder struct {
	// The perlbuilder builds Perl projects.
	Perlbuilder *PerlBuilder `protobuf:"bytes,10,opt,name=perlbuilder,oneof"`
}

type Build_Pythonbuilder struct {
	// The pythonbuilder builds Python projects.
	Pythonbuilder *PythonBuilder `protobuf:"bytes,12,opt,name=pythonbuilder,oneof"`
}

type Build_Gomodbuilder struct {
	// The gomodbuilder captures the module cache of the specified module. The
	// resulting package is meant to be used as build dependency for gobuilder
	// packages.
	Gomodbuilder *GomodBuilder `protobuf:"bytes,13,opt,name=gomodbuilder,oneof"`
}

type Build_Gobuilder struct {
	// The gobuilder builds Go projects.
	Gobuilder *GoBuilder `protobuf:"bytes,18,opt,name=gobuilder,oneof"`
}

func (*Build_Cbuilder) isBuild_Builder() {}

func (*Build_Cmakebuilder) isBuild_Builder() {}

func (*Build_Mesonbuilder) isBuild_Builder() {}

func (*Build_Perlbuilder) isBuild_Builder() {}

func (*Build_Pythonbuilder) isBuild_Builder() {}

func (*Build_Gomodbuilder) isBuild_Builder() {}

func (*Build_Gobuilder) isBuild_Builder() {}

type Install_Symlink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The symbolic link target.
	Oldname *string `protobuf:"bytes,1,opt,name=oldname" json:"oldname,omitempty"`
	// The filename of the symbolic link to create.
	Newname *string `protobuf:"bytes,2,opt,name=newname" json:"newname,omitempty"` // relative to ${DISTRI_PREFIX}/out
}

func (x *Install_Symlink) Reset() {
	*x = Install_Symlink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Install_Symlink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Install_Symlink) ProtoMessage() {}

func (x *Install_Symlink) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Install_Symlink.ProtoReflect.Descriptor instead.
func (*Install_Symlink) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Install_Symlink) GetOldname() string {
	if x != nil && x.Oldname != nil {
		return *x.Oldname
	}
	return ""
}

func (x *Install_Symlink) GetNewname() string {
	if x != nil && x.Newname != nil {
		return *x.Newname
	}
	return ""
}

type Install_Chmod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to set the setuid bit.
	Setuid *bool `protobuf:"varint,1,opt,name=setuid" json:"setuid,omitempty"`
	// TODO: rename to filename for consistency
	// The filename of the file whose mode to change
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"` // relative to ${DISTRI_PREFIX}/out
}

func (x *Install_Chmod) Reset() {
	*x = Install_Chmod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Install_Chmod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Install_Chmod) ProtoMessage() {}

func (x *Install_Chmod) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Install_Chmod.ProtoReflect.Descriptor instead.
func (*Install_Chmod) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{8, 1}
}

func (x *Install_Chmod) GetSetuid() bool {
	if x != nil && x.Setuid != nil {
		return *x.Setuid
	}
	return false
}

func (x *Install_Chmod) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type Install_Cap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capability *string `protobuf:"bytes,2,opt,name=capability" json:"capability,omitempty"` // specified in cap_from_text(3)
	Filename   *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`     // relative to ${DISTRI_PREFIX}
}

func (x *Install_Cap) Reset() {
	*x = Install_Cap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Install_Cap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Install_Cap) ProtoMessage() {}

func (x *Install_Cap) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Install_Cap.ProtoReflect.Descriptor instead.
func (*Install_Cap) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{8, 2}
}

func (x *Install_Cap) GetCapability() string {
	if x != nil && x.Capability != nil {
		return *x.Capability
	}
	return ""
}

func (x *Install_Cap) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

type Install_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Srcpath  *string `protobuf:"bytes,1,opt,name=srcpath" json:"srcpath,omitempty"`   // relative to ${DISTRI_SOURCEDIR}
	Destpath *string `protobuf:"bytes,2,opt,name=destpath" json:"destpath,omitempty"` // relative to ${DISTRI_PREFIX}
}

func (x *Install_File) Reset() {
	*x = Install_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Install_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Install_File) ProtoMessage() {}

func (x *Install_File) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Install_File.ProtoReflect.Descriptor instead.
func (*Install_File) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{8, 3}
}

func (x *Install_File) GetSrcpath() string {
	if x != nil && x.Srcpath != nil {
		return *x.Srcpath
	}
	return ""
}

func (x *Install_File) GetDestpath() string {
	if x != nil && x.Destpath != nil {
		return *x.Destpath
	}
	return ""
}

type Install_Rename struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oldname *string `protobuf:"bytes,1,opt,name=oldname" json:"oldname,omitempty"` // relative to ${DISTRI_PREFIX}/out
	Newname *string `protobuf:"bytes,2,opt,name=newname" json:"newname,omitempty"` // relative to ${DISTRI_PREFIX}/out
}

func (x *Install_Rename) Reset() {
	*x = Install_Rename{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Install_Rename) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Install_Rename) ProtoMessage() {}

func (x *Install_Rename) ProtoReflect() protoreflect.Message {
	mi := &file_build_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Install_Rename.ProtoReflect.Descriptor instead.
func (*Install_Rename) Descriptor() ([]byte, []int) {
	return file_build_proto_rawDescGZIP(), []int{8, 4}
}

func (x *Install_Rename) GetOldname() string {
	if x != nil && x.Oldname != nil {
		return *x.Oldname
	}
	return ""
}

func (x *Install_Rename) GetNewname() string {
	if x != nil && x.Newname != nil {
		return *x.Newname
	}
	return ""
}

var File_build_proto protoreflect.FileDescriptor

var file_build_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70,
	0x62, 0x22, 0x1f, 0x0a, 0x09, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x76, 0x22, 0xa7, 0x01, 0x0a, 0x08, 0x43, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x4d, 0x61, 0x6b, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x6f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x6c, 0x64, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x64, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x38, 0x0a, 0x0c,
	0x43, 0x4d, 0x61, 0x6b, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6d, 0x61,
	0x6b, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x38, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x6f, 0x6e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x6d, 0x65, 0x73, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x22, 0x3d, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x4d, 0x61, 0x6b, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x0f, 0x0a, 0x0d, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x22, 0x0e, 0x0a, 0x0c, 0x47, 0x6f, 0x6d, 0x6f, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x22, 0x5d, 0x0a, 0x09, 0x47, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x6f, 0x5f, 0x65,
	0x6e, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x6f, 0x45, 0x6e, 0x76, 0x22,
	0xef, 0x04, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2d,
	0x0a, 0x07, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x79, 0x6d,
	0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x63, 0x68,
	0x6d, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x43, 0x68, 0x6d, 0x6f, 0x64, 0x52, 0x05, 0x63, 0x68,
	0x6d, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x3d,
	0x0a, 0x07, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6c, 0x64,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x33, 0x0a,
	0x05, 0x43, 0x68, 0x6d, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x74, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x41, 0x0a, 0x03, 0x43, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x3c, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x72, 0x63, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x72, 0x63, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x70,
	0x61, 0x74, 0x68, 0x1a, 0x3c, 0x0a, 0x06, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x2d, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6c,
	0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72,
	0x22, 0x64, 0x0a, 0x0c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x05,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x64, 0x65, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x22, 0x2b, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6b, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x6b, 0x67, 0x22, 0x3a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x65, 0x70, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6c, 0x22,
	0xbf, 0x01, 0x0a, 0x04, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x62, 0x69,
	0x61, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x69, 0x61, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x44, 0x0a, 0x13, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x11,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6c,
	0x6c, 0x22, 0x97, 0x07, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x75, 0x6c, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x04, 0x70, 0x75, 0x6c,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x68, 0x65, 0x72, 0x72, 0x79, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x72, 0x72, 0x79, 0x50, 0x69, 0x63, 0x6b, 0x12,
	0x2d, 0x0a, 0x12, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x64, 0x69, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x72, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x69, 0x72, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x77, 0x61, 0x72, 0x66, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x63, 0x6b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x77, 0x61, 0x72, 0x66, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x65, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x70,
	0x12, 0x2c, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x74, 0x65, 0x70, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2a,
	0x0a, 0x08, 0x63, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x08, 0x63, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x6d,
	0x61, 0x6b, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x4d, 0x61, 0x6b, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6d, 0x61, 0x6b, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x6f, 0x6e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65,
	0x73, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65,
	0x73, 0x6f, 0x6e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x6c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0d, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0c, 0x67, 0x6f,
	0x6d, 0x6f, 0x64, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x6f, 0x6d, 0x6f, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x6f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x67, 0x6f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x6f, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x67, 0x6f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x70,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44,
	0x65, 0x70, 0x12, 0x25, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x0d, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x42, 0x09, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x06, 0x5a, 0x04, 0x2e,
	0x3b, 0x70, 0x62,
}

var (
	file_build_proto_rawDescOnce sync.Once
	file_build_proto_rawDescData = file_build_proto_rawDesc
)

func file_build_proto_rawDescGZIP() []byte {
	file_build_proto_rawDescOnce.Do(func() {
		file_build_proto_rawDescData = protoimpl.X.CompressGZIP(file_build_proto_rawDescData)
	})
	return file_build_proto_rawDescData
}

var file_build_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_build_proto_goTypes = []interface{}{
	(*BuildStep)(nil),        // 0: pb.BuildStep
	(*CBuilder)(nil),         // 1: pb.CBuilder
	(*CMakeBuilder)(nil),     // 2: pb.CMakeBuilder
	(*MesonBuilder)(nil),     // 3: pb.MesonBuilder
	(*PerlBuilder)(nil),      // 4: pb.PerlBuilder
	(*PythonBuilder)(nil),    // 5: pb.PythonBuilder
	(*GomodBuilder)(nil),     // 6: pb.GomodBuilder
	(*GoBuilder)(nil),        // 7: pb.GoBuilder
	(*Install)(nil),          // 8: pb.Install
	(*Claim)(nil),            // 9: pb.Claim
	(*SplitPackage)(nil),     // 10: pb.SplitPackage
	(*Union)(nil),            // 11: pb.Union
	(*RegexpReplaceAll)(nil), // 12: pb.RegexpReplaceAll
	(*Pull)(nil),             // 13: pb.Pull
	(*Build)(nil),            // 14: pb.Build
	(*Install_Symlink)(nil),  // 15: pb.Install.Symlink
	(*Install_Chmod)(nil),    // 16: pb.Install.Chmod
	(*Install_Cap)(nil),      // 17: pb.Install.Cap
	(*Install_File)(nil),     // 18: pb.Install.File
	(*Install_Rename)(nil),   // 19: pb.Install.Rename
}
var file_build_proto_depIdxs = []int32{
	15, // 0: pb.Install.symlink:type_name -> pb.Install.Symlink
	16, // 1: pb.Install.chmod:type_name -> pb.Install.Chmod
	17, // 2: pb.Install.capability:type_name -> pb.Install.Cap
	18, // 3: pb.Install.file:type_name -> pb.Install.File
	19, // 4: pb.Install.rename:type_name -> pb.Install.Rename
	9,  // 5: pb.SplitPackage.claim:type_name -> pb.Claim
	12, // 6: pb.Pull.release_replace_all:type_name -> pb.RegexpReplaceAll
	13, // 7: pb.Build.pull:type_name -> pb.Pull
	0,  // 8: pb.Build.build_step:type_name -> pb.BuildStep
	1,  // 9: pb.Build.cbuilder:type_name -> pb.CBuilder
	2,  // 10: pb.Build.cmakebuilder:type_name -> pb.CMakeBuilder
	3,  // 11: pb.Build.mesonbuilder:type_name -> pb.MesonBuilder
	4,  // 12: pb.Build.perlbuilder:type_name -> pb.PerlBuilder
	5,  // 13: pb.Build.pythonbuilder:type_name -> pb.PythonBuilder
	6,  // 14: pb.Build.gomodbuilder:type_name -> pb.GomodBuilder
	7,  // 15: pb.Build.gobuilder:type_name -> pb.GoBuilder
	8,  // 16: pb.Build.install:type_name -> pb.Install
	10, // 17: pb.Build.split_package:type_name -> pb.SplitPackage
	11, // 18: pb.Build.runtime_union:type_name -> pb.Union
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_build_proto_init() }
func file_build_proto_init() {
	if File_build_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_build_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMakeBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MesonBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerlBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GomodBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Install); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Union); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegexpReplaceAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Build); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Install_Symlink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Install_Chmod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Install_Cap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Install_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Install_Rename); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_build_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Build_Cbuilder)(nil),
		(*Build_Cmakebuilder)(nil),
		(*Build_Mesonbuilder)(nil),
		(*Build_Perlbuilder)(nil),
		(*Build_Pythonbuilder)(nil),
		(*Build_Gomodbuilder)(nil),
		(*Build_Gobuilder)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_build_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_build_proto_goTypes,
		DependencyIndexes: file_build_proto_depIdxs,
		MessageInfos:      file_build_proto_msgTypes,
	}.Build()
	File_build_proto = out.File
	file_build_proto_rawDesc = nil
	file_build_proto_goTypes = nil
	file_build_proto_depIdxs = nil
}
